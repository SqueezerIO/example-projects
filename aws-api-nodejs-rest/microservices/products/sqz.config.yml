# SQUEEZER MICROSERVICE

name: products
description: Orchestrating products trough database

# ENVIRONMENT VARIABLES ( accessible via "process.env" in NodeJS )
env:
#  MSG: hello
  PRODUCTS_TABLE: DynamoStack.Outputs.ProductsDynamoTable
  dev:
    PRODUCTS_TABLE_READ_CAPACITY: 1
    PRODUCTS_TABLE_WRITE_CAPACITY: 1
  prod:
    PRODUCTS_TABLE_READ_CAPACITY: 10
    PRODUCTS_TABLE_WRITE_CAPACITY: 10
functions:
  addProduct:
#     Function description
#     http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html#cfn-lambda-function-description
    description: Adds a new product

#     Handler
#     http://docs.aws.amazon.com/lambda/latest/dg/nodejs-prog-model-handler.html
    handler: restAdd

#     Memory size ( MB )
#     https://aws.amazon.com/lambda/pricing/
    memory: 128

#     Execution timeout
#     http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html#cfn-lambda-function-timeout
    timeout: 6

#     invoke current lambda function when some of the next events is triggered
#     http://docs.aws.amazon.com/lambda/latest/dg/invoking-lambda-function.html
    events:
      - http:
          path: /rest/v1/products
          method: post
#      - s3:
#          bucket: s3Stack.myS3Bucket
#          event: s3:ObjectCreated:*
#          # optional filters
#          filter:
#            S3Key:
#              Rules:
#                - Name: suffix
#                  Value: zip
#      - schedule:
#          value: rate(1 minute)
#          # OR
#          value: cron(0 10 * * * *)
#          stages:
#            - prod
#      - stream:
#          sourceArn: DynamoStack.Outputs.ProductsDynamoTableStreamArn
#          batchSize: 100
#          startPosition: LATEST
#      - stream:
#          sourceArn: KinesisStack.Outputs.myKinesisStreamArn
#          batchSize: 100
#          startPosition: LATEST
#      - sns:
#          topic: snsStack.mySNSTopic
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - alexaSkills:
#          enabled: true

  listProducts:
    description: List all the current products
    handler: restList
    events:
      - http:
          path: /rest/v1/products
          method: get

  getProduct:
    description: Get a specific product
    handler: restGet
    events:
      - http:
          path: /rest/v1/products/{id}
          method: get

  removeProduct:
    description: Removes a specific product
    handler: restRemove
    events:
      - http:
          path: /rest/v1/products/{id}
          method: delete

  updateProduct:
    description: Update a specific product
    handler: restUpdate
    events:
      - http:
          path: /rest/v1/products/{id}
          method: put

# INCLUDES FILES OR DIRECTORIES FROM PROJECT ( should appear on "src/inclusions/DEST" microservice's path )
inclusions:
  - src: lib/http
    dest: http

packaging:
  - node_modules
  - inclusions/http
#  - other_dir
#  - other_file
